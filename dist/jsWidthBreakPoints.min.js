class JsWidthBreakPoints{static defaults={widths:[],syncWidthMediaQuery:!1,onBreakPoint:null,applyClasses:!0,classPrefix:"width-"};static init(t={}){this.options={...this.defaults,...t},this.breakpoints=this.options.widths.sort(((t,i)=>i-t)),this.currentWidth=this.getWindowWidth(),this.setupEventListeners(),this.checkBreakPoints()}static getWindowWidth(){return this.options.syncWidthMediaQuery?window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth:window.innerWidth}static setupEventListeners(){window.addEventListener("resize",(()=>{this.checkBreakPoints()}))}static checkBreakPoints(){const t=this.getWindowWidth();if(t!==this.currentWidth){this.currentWidth=t;const i=this.getCurrentBreakpoint();"function"==typeof this.options.onBreakPoint&&this.options.onBreakPoint({currentWidth:this.currentWidth,breakpoint:i}),this.options.applyClasses&&this.applyBreakpointClasses(i)}}static getCurrentBreakpoint(){if(this.currentWidth<=this.breakpoints[this.breakpoints.length-1])return`lt${this.breakpoints[this.breakpoints.length-1]}`;if(this.currentWidth>=this.breakpoints[0])return`gt${this.breakpoints[0]}`;for(let t=0;t<this.breakpoints.length;t++)if(this.currentWidth>=this.breakpoints[t])return`b${this.breakpoints[t]}a${this.breakpoints[t-1]}`;return null}static applyBreakpointClasses(t){const i=document.body,s=this.options.classPrefix;i.classList.remove(...Array.from(i.classList).filter((t=>t.startsWith(s)))),t&&i.classList.add(`${s}${t}`)}}window.JsWidthBreakPoints=JsWidthBreakPoints;