class JsWidthBreakPoints{static defaults={widths:[],onBreakPoint:null,applyClasses:!0,classPrefix:"width-",rule:{show:!1,opacity:1,color:"red"}};static init(t={}){this.options={...this.defaults,...t},this.breakpoints=this.options.widths.sort(((t,e)=>e-t)),this.breakpoints_length=this.breakpoints.length,this.biggestBreakpoint=this.breakpoints[0],this.smallestBreakpoint=this.breakpoints[this.breakpoints_length-1],this.hasCallback="function"==typeof this.options.onBreakPoint,this.currentWidth=this.getWindowWidth(),this.currentClass=null,this.setupEventListeners(),this.checkBreakPoints(!0),this.options.rule.show&&(this.injectRuleStyles(),this.createRule())}static getWindowWidth(){return window.innerWidth}static setupEventListeners(){window.addEventListener("resize",(()=>{this.checkBreakPoints()}))}static checkBreakPoints(t=!1){const e=this.getWindowWidth();if(e!==this.currentWidth||t){this.currentWidth=e;const t=this.getCurrentBreakpoint();if(this.options.applyClasses&&t!==this.currentClass){const e=this.currentClass;this.currentClass=t,this.hasCallback&&this.options.onBreakPoint({oldBreakpoint:e||"",currentWidth:this.currentWidth,currentBreakpoint:t}),this.applyBreakpointClasses(t)}}}static getCurrentBreakpoint(){if(this.currentWidth<=this.smallestBreakpoint)return`lt${this.smallestBreakpoint}`;if(this.currentWidth>=this.biggestBreakpoint)return`gt${this.biggestBreakpoint}`;for(let t=0;t<this.breakpoints_length;t++)if(this.currentWidth>=this.breakpoints[t])return`b${this.breakpoints[t]}a${this.breakpoints[t-1]}`;return null}static applyBreakpointClasses(t){const e=document.body,i=this.options.classPrefix;e.classList.remove(...Array.from(e.classList).filter((t=>t.startsWith(i)))),t&&e.classList.add(`${i}${t}`)}static injectRuleStyles(){const t="jsWidthBreakPointsRuleStyles";if(document.getElementById(t))return;const e=`\n            .jsWidthBreakPoints-rule {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                pointer-events: none; /* Ensure the rule doesn't interfere with clicks */\n                z-index: 1000;\n            }\n\n            .jsWidthBreakPoints-rule-line {\n                position: absolute;\n                top: 0;\n                height: 100%;\n                width: 1px;\n                background-color: ${this.options.rule.color};\n                opacity: ${this.options.rule.opacity};\n            }\n\n            .jsWidthBreakPoints-rule-label {\n                position: absolute;\n                top: 10px;\n                left: 5px;\n                background-color: dimgrey;\n                color: white;\n                padding: 2px 5px;\n                font-size: 12px;\n                border-radius: 3px;\n                shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n                opacity: ${this.options.rule.opacity};\n            }\n        `,i=document.createElement("style");i.id=t,i.textContent=e,document.head.appendChild(i)}static createRule(){const t=document.createElement("div");t.className="jsWidthBreakPoints-rule",this.breakpoints.forEach((e=>{const i=document.createElement("div");i.className="jsWidthBreakPoints-rule-line",i.style.left=`${e}px`;const s=document.createElement("div");s.className="jsWidthBreakPoints-rule-label",s.textContent=`${e}px`,s.style.left=`${e+5}px`,t.appendChild(i),t.appendChild(s)})),document.body.appendChild(t)}}window.JsWidthBreakPoints=JsWidthBreakPoints;